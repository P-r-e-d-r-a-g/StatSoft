/* PSPP - a program for statistical analysis.
   Copyright (C) 2015 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>. */

#ifndef PERCENTILES_H
#define PERCENTILES_H

#include "libpspp/str.h"
#include "libpspp/hmap.h"
#include "data/value.h"
#include "output/chart-item.h"


struct percentiles
  {
    struct chart_item chart_item;
  };


struct variable;
struct freq;

struct percentiles *percentiles_create (const struct variable **, int n_vars,
				    const char *ylabel, bool percent,
                                    struct freq *const *, int n_cats);

/* This boilerplate for percentiles, a subclass of chart_item, was
   autogenerated by mk-class-boilerplate. */

#include <assert.h>
#include "libpspp/cast.h"

extern const struct chart_item_class percentiles_class;

/* Returns true if SUPER is a percentiles, otherwise false. */
static inline bool
is_percentiles (const struct chart_item *super)
{
  return super->class == &percentiles_class;
}

/* Returns SUPER converted to percentiles.  SUPER must be a percentiles, as
   reported by is_percentiles. */
static inline struct percentiles *
to_percentiles (const struct chart_item *super)
{
  assert (is_percentiles (super));
  return UP_CAST (super, struct percentiles, chart_item);
}

/* Returns INSTANCE converted to chart_item. */
static inline struct chart_item *
percentiles_super (const struct percentiles *instance)
{
  return CONST_CAST (struct chart_item *, &instance->chart_item);
}

/* Increments INSTANCE's reference count and returns INSTANCE. */
static inline struct percentiles *
percentiles_ref (const struct percentiles *instance)
{
  return to_percentiles (chart_item_ref (&instance->chart_item));
}

/* Decrements INSTANCE's reference count, then destroys INSTANCE if
   the reference count is now zero. */
static inline void
percentiles_unref (struct percentiles *instance)
{
  chart_item_unref (&instance->chart_item);
}

/* Returns true if INSTANCE's reference count is greater than 1,
   false otherwise. */
static inline bool
percentiles_is_shared (const struct percentiles *instance)
{
  return chart_item_is_shared (&instance->chart_item);
}

static inline void
percentiles_submit (struct percentiles *instance)
{
  chart_item_submit (&instance->chart_item);
}

#endif /* output/charts/percentiles.h */
