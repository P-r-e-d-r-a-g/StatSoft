/* PSPP - a program for statistical analysis.
   Copyright (C) 2015 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>. */

#ifndef QQ_H
#define QQ_H

#include "libpspp/str.h"
#include "libpspp/hmap.h"
#include "data/value.h"
#include "output/chart-item.h"


#define X_LABEL "Observed value"
#define X_LABEL_DETRENDED "Observed value"
#define Y_LABEL "Expected value"
#define Y_LABEL_DETRENDED "Deviation from normal"

/* Constants for distribution params */
#define NORMAL_PARAMS_NUM 2
#define NORMAL_MEAN 0
#define NORMAL_VAR 1

enum
{
	NORMAL
};

struct qq_chart
  {
    struct chart_item chart_item;
    struct casereader *data;
    struct variable *byvar;
    char *xlabel, *xlabel_detrended;
    char *ylabel, *ylabel_detrended;

    int value_num;

    int distribution;
    double *distribution_params;
    double *distribution_percentiles;
    double *deviation;

    bool draw_detrended;

    double y_min, y_max;
    double x_min, x_max;
  };


struct variable;
struct freq;

struct qq_chart *qq_chart_create (struct casereader *reader,
	   			const char *xlabel, const char *xlabel_detrended,
	   			const char *ylabel, const char *ylabel_detrended,
	   			const struct variable *byvar,
	   			const char *label,
				const int distribution,
				const double *distribution_params,
				const int value_num,
	   			double xmin, double xmax, double ymin, double ymax);

/* This boilerplate for qq, a subclass of chart_item, was
   autogenerated by mk-class-boilerplate. */

#include <assert.h>
#include "libpspp/cast.h"

extern const struct chart_item_class qq_chart_class;

/* Returns true if SUPER is a qq, otherwise false. */
static inline bool
is_qq_chart (const struct chart_item *super)
{
  return super->class == &qq_chart_class;
}

/* Returns SUPER converted to qq.  SUPER must be a qq, as
   reported by is_qq. */
static inline struct qq_chart *
to_qq_chart (const struct chart_item *super)
{
  assert (is_qq_chart (super));
  return UP_CAST (super, struct qq_chart, chart_item);
}

/* Returns INSTANCE converted to chart_item. */
static inline struct chart_item *
qq_chart_super (const struct qq_chart *instance)
{
  return CONST_CAST (struct chart_item *, &instance->chart_item);
}

/* Increments INSTANCE's reference count and returns INSTANCE. */
static inline struct qq_chart *
qq_chart_ref (const struct qq_chart *instance)
{
  return to_qq_chart (chart_item_ref (&instance->chart_item));
}

/* Decrements INSTANCE's reference count, then destroys INSTANCE if
   the reference count is now zero. */
static inline void
qq_chart_unref (struct qq_chart *instance)
{
  chart_item_unref (&instance->chart_item);
}

/* Returns true if INSTANCE's reference count is greater than 1,
   false otherwise. */
static inline bool
qq_chart_is_shared (const struct qq_chart *instance)
{
  return chart_item_is_shared (&instance->chart_item);
}

static inline void
qq_chart_submit (struct qq_chart *instance)
{
  chart_item_submit (&instance->chart_item);
}

#endif /* output/charts/qq.h */
